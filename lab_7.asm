;===============================================================================
; Jordan Lee, Logan Barnes
; Group 1
; ECE 4730
; 12.14.2015
; Description: This program generates PWM signals to control dc motors. We are
;   completing part one of lab 7.11 in "Microcontroller Theory and Applications
;   HC12 & S12". The learning lessons from this lab are to understand and use
;   the input capture and output compare systems to create the PWM signals. We
;   will be using a 12V DC motor and a SN774410NE driver.
;===============================================================================

;-------------------------------------------------------------------------------
;Set constant variables
;-------------------------------------------------------------------------------
           ORG          $1000
TSCR1      EQU          $0046   ;Address for the TSCR1 register
TEN        EQU          $80     ;TEN is bit 7 of TSCR1
TSCR2      EQU          $004D   ;Timer system control register 2 location
TSCR2_IN   EQU          $0000   ;Initialization value
TIE        EQU          $004C   ;Address for the TIE register
IC_EN      EQU          $03     ;Enable IC0, IC1 interrupts
TCTL1      EQU          $0048   ;Upper 8 mode/level <- In order
TCTL2      EQU          $0049   ;Address for the TCTL2 register
TCTL4      EQU          $004B   ;Address for the TCTL4 register
TCTL4_IN   EQU          $05     ;Initialize IC0 and IC1 to rising edge
TCNTH      EQU          $0044
TCNTL      EQU          $0045
CFORC      EQU          $0041
OC7M       EQU          $0042
OC7D       EQU          $0043
TC2H       EQU          $0054
TC2L       EQU          $0055
TC3H       EQU          $0056
TC3L       EQU          $0057
T1_MSK     EQU          $80
IOCHMASK   EQU          $0C
TIOS       EQU          $0040   ;Address of TIOS register
TIOS_IN    EQU          $0C     ;Sets 0 and 1 to IC and sets 2 and 3 to OC
TFLG1      EQU          $004E   ;The flags for timer system
PRINTF     EQU          $EE88   ;The 9S12 subroutine for printing to screen
CR:        EQU          $0D     ;ASCII Return character
LF:        EQU          $0A     ;ASCII linefeed character


DEBUG      FCC          'Debug' ;A string to put to the screen for debug
           DB           CR,LF,0 ;purposes

;Memory spots reserved for keeping track of the number of seconds that have
;passed and the characters to print to the screen.
PRINT1     FCC          'The total running time is ' ;First part of the string
SEC_TEN    FCB          $02     ;A place in memory to keep track of the tens
                                ;position when counting seconds
SEC_ONE    FCB          $30     ;Keep track of the ones right after the tens
PRINT2     FCC          ' sec.' ;End of the print statement
           DB           CR,LF,0 ;Carriage return, line feed and end of string
                                ;marker
           
NUM_PULSES FDB          $0000   ;Keep track of the number of pulses received
PPS        FDB          $002E   ;Keep two bytes for pulses per second
DTYCYCL    FDB          $0CCD   ;Reserve a word to set and read duty cycle

;-------------------------------------------------------------------------------
; Main Program
; a. Use the output compare system to modify the duty cycle of the rectangular
;        output waveform
; b. Use the input capture funtion to monitor the number of pulses arriving at
;        an input capture pin and modify the output waveform accordingly
; c. Change the speed of the motor by adjusting the duty cycle of the output
;        waveform according to a specified speed profile
; d. Interface the S12 with 2 DC motors using the SN754410NE chip
;-------------------------------------------------------------------------------

           ORG          $2000
           LDS          #$4000               ;Initialize the stack


;  a.Pins PT2 and PT3 are used to generate ouput signals
;    The TCNT takes 2.62144 ms to count from 0000 to FFFF. For a 15 second time
; period we need 5,722 pulses. 5 seconds will be sent for acceleration, 5
; seconds for constant speed and 5 seconds for deceleration. Each 5 second
; period will consist of 1,907 pulses of the TCNT. Acceleration starts at 5%
; duty cycle and goes until 20% duty cycle. A 5% duty cycle will have a count
; of 1.25x10^6 and a 20% duty cycle will have a count of 5.0x10^6.
; Step Two - Generate PWM signals
;  b.Pins PT0 and PT1 are used to monitor input signals generated by the OC2 and
; OC3 output compare systems
; c.The OC2 and OC3 output compare systems will control the left and right motors

           BSR          TIMERINIT       ;Initialize timer system
GEN        BSR          SETDUTY         ;Set the duty cycle for each loop
           BRA          GEN

;-------------------------------------------------------------------------------
; OCINIT subroutine: Initializes the Output compare system to go low on
;                    specified (DTY5) duty cycle of 5%.
;-------------------------------------------------------------------------------
TIMERINIT  CLR          TIE                ;Disable interrupts
           MOVB         #TSCR2_IN, TSCR2   ;Turn off overflow no prescaler
           MOVB         #TCTL4_IN, TCTL4   ;Set IC0 and IC1 to rising edge
           MOVB         #TIOS_IN, TIOS     ;Set pins 0,1 to IC and 2,3 to OC
           MOVW         #IC_INT, $3E6E     ;Set vector for IC0,IC1 with DBUG12
                                           ;interrupt vector map address
           MOVB         #TEN, TSCR1        ;Enable timer system with TEN bit
           MOVB         #IC_EN, TIE        ;Enable IC0, IC1 interrupts
           CLI
           RTS

;-------------------------------------------------------------------------------
; GETDUTY subroutine: Gets desired duty cycle value and stores it in DTYCYCL
;-------------------------------------------------------------------------------
GETDUTY    RTS

;-------------------------------------------------------------------------------
; SETDUTY subroutine: Sets the duty cycle according to value in Accumulator A
;-------------------------------------------------------------------------------
SETDUTY    RTS

;-------------------------------------------------------------------------------
; IC_INT subroutine: The ISR for an IC event
;-------------------------------------------------------------------------------
IC_INT     LDAA         TFLG1          ;Clear the IC0 and IC1 Flags
           ORAA         #$03
           STAA         TFLG1
           LDAA         SEC_TEN        ;Check the ten's spot to see if we are
           CMPA         #$02           ;in the first ten seconds. If we aren't
           BNE          DCL            ;then we have to be decelerating
           LDAA         SEC_ONE        ;We are in the first ten seconds. Check
           CMPA         #$35           ;if we are in the first five seconds and
           BLT          ACC            ;accelerate if we are.
           BRA          CONST          ;5-10 second range means constant speed
DCL        JSR          MTR_DEC        ;Decelerate the motors
           BRA          CHCK_SEC
ACC        JSR          MTR_ACC        ;Accelerate the motors
           BRA          CHCK_SEC
CONST      JSR          MTR_CONST      ;Keep motors constant
CHCK_SEC   LDD          NUM_PULSES     ;Check the number of pulses received so
           ADDD         #01            ;far and add 1 to it
           STD          NUM_PULSES     ;Store the new number of pulses
           LDX          PPS            ;Get the number of pulses in a second and
           IDIV                        ;divide total pulses by that number
           CPD          #0000          ;If there is no remainder, then we are at
           BEQ          IS_SEC         ;the second mark
           RTI                         ;if there is a remainder continue program
IS_SEC     JSR          PRINT          ;Call the print subroutine to print out
           RTI                         ;the number of seconds and return from
                                       ;the interrupt

;-------------------------------------------------------------------------------
; PRINT subroutine: Prints the values to the computer monitor
;-------------------------------------------------------------------------------
PRINT      LDAA  SEC_ONE       ;Get current number of seconds in ones position
           ADDA  #01           ;Add a second to the ones position
           CMPA  #$3A          ;Check to see if it is the character above '9'
           BEQ   ADD_TEN       ;and if it is go to the ADD_TEN section
           STAA  SEC_ONE       ;If not store the new added second to ones
           BRA   PRNT_SEC      ;position and continue to print
ADD_TEN    LDAA  #$31          ;Put a '1' in the tens position
           STAA  SEC_TEN
           LDAA  #$30          ;Put a '0' in the ones position
           STAA  SEC_ONE
PRNT_SEC   LDD   #PRINT1       ;Display the message that tracks how many seconds
           LDX   PRINTF        ;have passed based on the number of pulses
           JSR   0,X
           LDAA  SEC_ONE       ;Check one's and ten's place to see if we have
           CMPA  #$35          ;reached 15 seconds. When we have then the
           BNE   GO            ;program can stop executing. Otherwise, continue
           LDAA  SEC_TEN       ;running the program
           CMPA  #$31
           BNE   GO
DONE       BRA   DONE
GO         RTS


;-------------------------------------------------------------------------------
; MTR_ACC subroutine: Gets called every TCNT pulse for seconds 0 - 5. Every time
;                     this subroutine is called it increases the motor duty
;                     cycle by a specified amount.
;-------------------------------------------------------------------------------
MTR_ACC    LDAA #$0
           RTS

;-------------------------------------------------------------------------------
; MTR_CONST subroutine: Gets called every TCNT pulse for seconds 5-10. This
;                      subroutine keeps the motor's duty cycle at the same rate.
;-------------------------------------------------------------------------------
MTR_CONST  RTS

;-------------------------------------------------------------------------------
; MTR_DEC subroutine: Gets called every TCNT pulse for seconds 10-15. This
;                     subroutine decreases the motor's duty cycle by a specified
;                     amount.
;-------------------------------------------------------------------------------
MTR_DEC    RTS

           END