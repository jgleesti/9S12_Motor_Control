
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;===============================================================================
                        ; Jordan Lee, Logan Barnes
                        ; Group 1
                        ; ECE 4730
                        ; 12.14.2015
                        ; Description: This program generates PWM signals to control dc motors. We are
                        ;   completing part one of lab 7.11 in "Microcontroller Theory and Applications
                        ;   HC12 & S12". The learning lessons from this lab are to understand and use
                        ;   the input capture and output compare systems to create the PWM signals. We
                        ;   will be using a 12V DC motor and a SN774410NE driver.
                        ;===============================================================================
                        
                        ;-------------------------------------------------------------------------------
                        ;Set constant variables
                        ;-------------------------------------------------------------------------------
1000                               ORG          $1000
0046                    TSCR1      EQU          $0046   ;Address for the TSCR1 register
0080                    TEN        EQU          $80     ;TEN is bit 7 of TSCR1
004d                    TSCR2      EQU          $004D   ;Timer system control register 2 location
0000                    TSCR2_IN   EQU          $0000   ;Initialization value
004c                    TIE        EQU          $004C   ;Address for the TIE register
0003                    IC_EN      EQU          $03     ;Enable IC0, IC1 interrupts
0048                    TCTL1      EQU          $0048   ;Upper 8 mode/level <- In order
0049                    TCTL2      EQU          $0049   ;Address for the TCTL2 register
004b                    TCTL4      EQU          $004B   ;Address for the TCTL4 register
0005                    TCTL4_IN   EQU          $05     ;Initialize IC0 and IC1 to rising edge
0044                    TCNTH      EQU          $0044
0045                    TCNTL      EQU          $0045
0041                    CFORC      EQU          $0041
0042                    OC7M       EQU          $0042   ;Address for OC7M
000c                    OC7MMSK    EQU          $0C
0043                    OC7D       EQU          $0043   ;Address for OC7D
000c                    OC7DMSK    EQU          $0C
0054                    TC2H       EQU          $0054
0055                    TC2L       EQU          $0055
0056                    TC3H       EQU          $0056
0057                    TC3L       EQU          $0057
005e                    TC7H       EQU          $005E
005f                    TC7L       EQU          $005F
0080                    T1_MSK     EQU          $80
004f                    TFLG2      EQU          $004F   ;Address of the timer flag 2
000c                    IOCHMASK   EQU          $0C
0040                    TIOS       EQU          $0040   ;Address of TIOS register
000c                    TIOS_IN    EQU          $0C     ;Sets 0 and 1 to IC and sets 2 and 3 to OC
004e                    TFLG1      EQU          $004E   ;The flags for timer system
ee88                    PRINTF     EQU          $EE88   ;The 9S12 subroutine for printing to screen
000d                    CR:        EQU          $0D     ;ASCII Return character
000a                    LF:        EQU          $0A     ;ASCII linefeed character
                        
                        
                        
1000 44 65 62 75 67     DEBUG      FCC          'Debug' ;A string to put to the screen for debug
1005 0d 0a 00                      DB           CR,LF,0 ;purposes
                        
                        ;Memory spots reserved for keeping track of the number of seconds that have
                        ;passed and the characters to print to the screen.
1008 54 68 65 20 74 6f  PRINT1     FCC          'The total running time is ' ;First part of the string
     74 61 6c 20 72 75
     6e 6e 69 6e 67 20
     74 69 6d 65 20 69
     73 20
1022 02                 SEC_TEN    FCB          $02     ;A place in memory to keep track of the tens
                                                        ;position when counting seconds
1023 30                 SEC_ONE    FCB          $30     ;Keep track of the ones right after the tens
1024 20 73 65 63 2e     PRINT2     FCC          ' sec.' ;End of the print statement
1029 0d 0a 00                      DB           CR,LF,0 ;Carriage return, line feed and end of string
                                                        ;marker
                        
102c 00 00              NUM_PULSES FDB          $0000   ;Keep track of the number of pulses received
102e 00 2e              PPS        FDB          $002E   ;Keep two bytes for pulses per second
1030 0c cd              DUTY       FDB          $0CCD   ;Reserve a word to set and read duty cycle
1032 2b                 STEP       FCB          $2B     ;Keep the amount the duty cycle is inc/dec
                        
                        ;-------------------------------------------------------------------------------
                        ; Main Program
                        ; a. Use the output compare system to modify the duty cycle of the rectangular
                        ;        output waveform
                        ; b. Use the input capture funtion to monitor the number of pulses arriving at
                        ;        an input capture pin and modify the output waveform accordingly
                        ; c. Change the speed of the motor by adjusting the duty cycle of the output
                        ;        waveform according to a specified speed profile
                        ; d. Interface the S12 with 2 DC motors using the SN754410NE chip
                        ;-------------------------------------------------------------------------------
                        
2000                               ORG          $2000
2000 cf 40 00                      LDS          #$4000               ;Initialize the stack
                        
                        
                        ;  a.Pins PT2 and PT3 are used to generate ouput signals
                        ;    The TCNT takes 2.62144 ms to count from 0000 to FFFF. For a 15 second time
                        ; period we need 5,722 pulses. 5 seconds will be sent for acceleration, 5
                        ; seconds for constant speed and 5 seconds for deceleration. Each 5 second
                        ; period will consist of 1,907 pulses of the TCNT. Acceleration starts at 5%
                        ; duty cycle and goes until 20% duty cycle. A 5% duty cycle will have a count
                        ; of 1.25x10^6 and a 20% duty cycle will have a count of 5.0x10^6.
                        ; Step Two - Generate PWM signals
                        ;  b.Pins PT0 and PT1 are used to monitor input signals generated by the OC2 and
                        ; OC3 output compare systems
                        ; c.The OC2 and OC3 output compare systems will control the left and right motors
                        
2003 07 04                         BSR          TIMERINIT       ;Initialize timer system
2005 07 28              GEN        BSR          SETDUTY         ;Set the duty cycle for each loop
2007 20 fc                         BRA          GEN
                        
                        ;-------------------------------------------------------------------------------
                        ; OCINIT subroutine: Initializes the Output compare system to go low on
                        ;                    specified (DTY5) duty cycle of 5%.
                        ;-------------------------------------------------------------------------------
2009 79 00 4c           TIMERINIT  CLR          TIE                ;Disable interrupts
200c 18 0b 00 00 4d                MOVB         #TSCR2_IN, TSCR2   ;Turn off overflow no prescaler
2011 18 0b 05 00 4b                MOVB         #TCTL4_IN, TCTL4   ;Set IC0 and IC1 to rising edge
                                   ;Set OC2 and OC3 to low
                        
2016 18 0b 0c 00 40                MOVB         #TIOS_IN, TIOS     ;Set pins 0,1 to IC and 2,3 to OC
201b 18 03 20 30 3e 6e             MOVW         #IC_INT, $3E6E     ;Set vector for IC0,IC1 with DBUG12
                                                                   ;interrupt vector map address
2021 18 0b 80 00 46                MOVB         #TEN, TSCR1        ;Enable timer system with TEN bit
2026 18 0b 03 00 4c                MOVB         #IC_EN, TIE        ;Enable IC0, IC1 interrupts
202b 10 ef                         CLI
202d 3d                            RTS
                        
                        ;-------------------------------------------------------------------------------
                        ; GETDUTY subroutine: Gets desired duty cycle value and stores it in DTYCYCL
                        ;-------------------------------------------------------------------------------
202e 3d                 GETDUTY    RTS
                        
                        ;-------------------------------------------------------------------------------
                        ; SETDUTY subroutine: Sets the duty cycle according to value in Accumulator A
                        ;-------------------------------------------------------------------------------
202f 3d                 SETDUTY    RTS
                        
                        ;-------------------------------------------------------------------------------
                        ; IC_INT subroutine: The ISR for an IC event
                        ;-------------------------------------------------------------------------------
2030 96 4e              IC_INT     LDAA         TFLG1          ;Clear the IC0 and IC1 Flags
2032 8a 03                         ORAA         #$03
2034 5a 4e                         STAA         TFLG1
2036 b6 10 22                      LDAA         SEC_TEN        ;Check the ten's spot to see if we are
2039 81 02                         CMPA         #$02           ;in the first ten seconds. If we aren't
203b 26 09                         BNE          DCL            ;then we have to be decelerating
203d b6 10 23                      LDAA         SEC_ONE        ;We are in the first ten seconds. Check
2040 81 35                         CMPA         #$35           ;if we are in the first five seconds and
2042 2d 07                         BLT          ACC            ;accelerate if we are.
2044 20 0a                         BRA          CONST          ;5-10 second range means constant speed
2046 16 20 aa           DCL        JSR          MTR_DEC        ;Decelerate the motors
2049 20 08                         BRA          CHCK_SEC
204b 16 20 9c           ACC        JSR          MTR_ACC        ;Accelerate the motors
204e 20 03                         BRA          CHCK_SEC
2050 16 20 a6           CONST      JSR          MTR_CONST      ;Keep motors constant
2053 fc 10 2c           CHCK_SEC   LDD          NUM_PULSES     ;Check the number of pulses received so
2056 c3 00 01                      ADDD         #01            ;far and add 1 to it
2059 7c 10 2c                      STD          NUM_PULSES     ;Store the new number of pulses
205c fe 10 2e                      LDX          PPS            ;Get the number of pulses in a second and
205f 18 10                         IDIV                        ;divide total pulses by that number
2061 8c 00 00                      CPD          #0000          ;If there is no remainder, then we are at
2064 27 01                         BEQ          IS_SEC         ;the second mark
2066 0b                            RTI                         ;if there is a remainder continue program
2067 16 20 6b           IS_SEC     JSR          PRINT          ;Call the print subroutine to print out
206a 0b                            RTI                         ;the number of seconds and return from
                                                               ;the interrupt
                        
                        ;-------------------------------------------------------------------------------
                        ; PRINT subroutine: Prints the values to the computer monitor
                        ;-------------------------------------------------------------------------------
206b b6 10 23           PRINT      LDAA  SEC_ONE       ;Get current number of seconds in ones position
206e 8b 01                         ADDA  #01           ;Add a second to the ones position
2070 81 3a                         CMPA  #$3A          ;Check to see if it is the character above '9'
2072 27 05                         BEQ   ADD_TEN       ;and if it is go to the ADD_TEN section
2074 7a 10 23                      STAA  SEC_ONE       ;If not store the new added second to ones
2077 20 0a                         BRA   PRNT_SEC      ;position and continue to print
2079 86 31              ADD_TEN    LDAA  #$31          ;Put a '1' in the tens position
207b 7a 10 22                      STAA  SEC_TEN
207e 86 30                         LDAA  #$30          ;Put a '0' in the ones position
2080 7a 10 23                      STAA  SEC_ONE
2083 cc 10 08           PRNT_SEC   LDD   #PRINT1       ;Display the message that tracks how many seconds
2086 fe ee 88                      LDX   PRINTF        ;have passed based on the number of pulses
2089 15 00                         JSR   0,X
208b b6 10 23                      LDAA  SEC_ONE       ;Check one's and ten's place to see if we have
208e 81 35                         CMPA  #$35          ;reached 15 seconds. When we have then the
2090 26 09                         BNE   GO            ;program can stop executing. Otherwise, continue
2092 b6 10 22                      LDAA  SEC_TEN       ;running the program
2095 81 31                         CMPA  #$31
2097 26 02                         BNE   GO
2099 20 fe              DONE       BRA   DONE
209b 3d                 GO         RTS
                        
                        
                        ;-------------------------------------------------------------------------------
                        ; MTR_ACC subroutine: Gets called every TCNT pulse for seconds 0 - 5. Every time
                        ;                     this subroutine is called it increases the motor duty
                        ;                     cycle by a specified amount.
                        ;-------------------------------------------------------------------------------
209c 96 54              MTR_ACC    LDAA  TC2H     ;Get the current Duty cycle and add 2B to it to
lab_7.asm:190: Warning - Value too large and has been masked to 0xFF
209e 8b 32                         ADDA  #STEP    ;increase from 5% to 20% over five seconds
20a0 5a 54                         STAA  TC2H
20a2 79 00 4f                      CLR   TFLG2    ;Reset the overflow flag
20a5 3d                 	   RTS
                        
                        ;-------------------------------------------------------------------------------
                        ; MTR_CONST subroutine: Gets called every TCNT pulse for seconds 5-10. This
                        ;                      subroutine keeps the motor's duty cycle at the same rate.
                        ;-------------------------------------------------------------------------------
20a6 79 00 4f           MTR_CONST  CLR   TFLG2    ;Reset the overflow flag
20a9 3d                 	   RTS
                        
                        ;-------------------------------------------------------------------------------
                        ; MTR_DEC subroutine: Gets called every TCNT pulse for seconds 10-15. This
                        ;                     subroutine decreases the motor's duty cycle by a specified
                        ;                     amount.
                        ;-------------------------------------------------------------------------------
20aa 96 54              MTR_DEC    LDAA  TC2H      ;Get the current Duty cycle and add 2B to it to
lab_7.asm:208: Warning - Value too large and has been masked to 0xFF
20ac 80 32                         SUBA  #STEP     ;decrease from 20% to 5% over five seconds
20ae 5a 54                         STAA  TC2H
20b0 79 00 4f                      CLR   TFLG2     ;Reset the overflow flag
20b3 3d                 	   RTS
                        
                                   END

Executed: Thu Feb 11 15:44:36 2016
Total cycles: 266, Total bytes: 231
Total errors: 0, Total warnings: 2
